 /*
 *
 *@author Abbadati Alessio - Dinaro Salvatore
 *@version 1.0
 *
 */
 
package movingball;

import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;

class movec extends JFrame{
    int x = 0, y, width = 40, height = 40;
    int radius = (width / 2);
    
    movec(int y){
        this.y=y;
    }
    
}

class BallComponent extends JPanel{
    
    public void add(Ball b) {
        balls.add(b);
    }
    
    public void paintComponent(Graphics g) {
        super.paintComponent(g); // erase background
        Graphics2D g2 = (Graphics2D) g;
        for (Ball b : balls) {
            g2.fill(b.getShape());
        }
    }
    
    private ArrayList<Ball> balls = new ArrayList<Ball>();
}

class Ball{
    public void move(Rectangle2D bounds) {
        x += dx;
        y += dy;
        if (x < bounds.getMinX()) {
            x = bounds.getMinX();
            dx = -dx;
        }
        if (x + XSIZE >= bounds.getMaxX()) {
            x = bounds.getMaxX() - XSIZE;
            dx = -dx;
        }
        if (y < bounds.getMinY()) {
            y = bounds.getMinY();
            dy = -dy;
        }
        if (y + YSIZE >= bounds.getMaxY()) {
            y = bounds.getMaxY() - YSIZE;
            dy = -dy;
        }
    }
    
    public Ellipse2D getShape() {
    return new Ellipse2D.Double(x, y, XSIZE, YSIZE);
  }

  private static final int XSIZE = 15;

  private static final int YSIZE = 15;

  private double x = 0;

  private double y = 0;

  private double dx = 1;

  private double dy = 1;
}

class moveret extends JPanel{

    Timer timer;
    int x = 0, y=0, width = 40, height = 40;
    int iniziox=0, inizioy, finex=120, finey=20;
    int frXPos = 500;
    int speedX = 1;

    moveret(int y, int x) {
        this.inizioy=y;
        this.iniziox=(x/2)-60;
    }
    
    public void movesx(int x){
        this.iniziox=x;
        ActionListener task=new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                repaint(x, inizioy, x+120, finex);
            }
        };
        timer = new Timer(0, task);
        timer.start();
    }
    
    public void movedx(int x){
        this.iniziox=x;
        ActionListener task=new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                repaint(x, inizioy, x+120, finex);
            }
        };
        timer = new Timer(0, task);
        timer.start();
    }
    
    public void paint(Graphics g) {
        super.paintComponent(g);
        g.setColor(Color.black);
        g.fillRect(iniziox, inizioy, finex, finey);
        //g.fillOval(x, y, width, height);
    }
    
}

class MovingBall extends JFrame{
    int x=0, y = 400, width = 40, height = 40;;
    moveret o;
    movec c;
    private BallComponent comp;
    private JFrame fr;
    
    MovingBall(){
        fr = new JFrame("Moving Ball");
        fr.setVisible(true);
        fr.setSize(1080, 720);          
        fr.setLocationRelativeTo(null);
        fr.setResizable(false);
        comp=new BallComponent();
        fr.add(comp);
        x=(fr.getWidth()/2)-60;
        o = new moveret(fr.getHeight()-100, fr.getWidth());
        fr.add(o);
        fr.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        fr.addKeyListener(new KeyListener(){
            @Override
            public void keyTyped(KeyEvent e) {
                
            }

            @Override
            public void keyPressed(KeyEvent e) {
                addBall();
            }
            
            @Override
            public void keyReleased(KeyEvent e) {
                
            }
            
        });
    }
    
    public void addBall(){
        
        int STEPS = 100;

        final int DELAY = 3;
        
        try {
            Ball ball = new Ball();
            comp.add(ball);

            for (int i = 1; i <= STEPS; i++) {
                STEPS=STEPS+1;
                ball.move(comp.getBounds());
                comp.paint(comp.getGraphics());
                Thread.sleep(DELAY);
                fr.addKeyListener(new KeyListener(){
                    
                    public void keyTyped(KeyEvent ke) {
                        
                    }

                    public void keyPressed(KeyEvent e) {
                        if(e.getKeyCode()==37){
                        if(x==0){
                            
                        }else{
                            if(x<=0){
                                x=0;
                            }else{
                                x=x-8;
                                o.movesx(x);
                            }
                        }
                        }else{
                            if(e.getKeyCode()==39){
                                if(x==fr.getWidth()-130){
                                
                                }else{
                                    if(x>=fr.getWidth()-130){
                                        x=fr.getWidth()-130;
                                    }else{
                                        x=x+8;
                                        o.movedx(x);
                                    }
                                }
                            }
                        }
                    }
                    
                    public void keyReleased(KeyEvent ke) {
                        
                    }
                    
                });
            }
        } catch (InterruptedException e) {
    }
  }
    
    public static void main(String args[]) {
        new MovingBall();
    }
}
